# -*- coding: utf-8 -*-
"""NoduleGenerator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hGJZRwM4lI0tIt8iW6PV7HnV1b83dmE9
"""

import torch
import torch.nn as nn
from torch.nn.utils import spectral_norm
import torch.nn.functional as F
from torch.nn.init import xavier_uniform_
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

class Generator(nn.Module):
    def __init__(self, channels_noise, channels_img, features_g):
        super(Generator, self).__init__()
        self.net = nn.Sequential(
            # Input: N x channels_noise x 1 x 1
            self._block(channels_noise, features_g * 16, 8, 1, 0),
            self._block(features_g * 16, features_g * 8, 5, 2, 1),
            self._block(features_g * 8, features_g * 4, 5, 2, 1),
            self._block(features_g * 4, features_g * 2, 4, 2, 1),
            nn.ConvTranspose2d(
                features_g * 2, channels_img, kernel_size=4, stride=2, padding=1
            ),
            # Output: N x channels_img x 64 x 64
            nn.Tanh(),
        )

        self.fcn = nn.Linear(100, 100)

    def _block(self, in_channels, out_channels, kernel_size, stride, padding):
        return nn.Sequential(
            nn.ConvTranspose2d(
                in_channels,
                out_channels,
                kernel_size,
                stride,
                padding,
                bias=False,
            ),
            # nn.BatchNorm2d(out_channels),
            nn.ReLU(),
        )

    def forward(self, noise, label):
      x = self.fcn(noise)
      x = torch.add(x, label)

      x = torch.unsqueeze(x, -1)
      x = torch.unsqueeze(x, -1)

      return self.net(x)

"""
model = Generator(100, 3, 3).to(device)
x = torch.randn((1, 100))
model(x, 2).shape
"""